// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// owlSparse
Rcpp::List owlSparse(arma::sp_mat x, arma::mat y, const Rcpp::List control);
RcppExport SEXP _owl_owlSparse(SEXP xSEXP, SEXP ySEXP, SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(owlSparse(x, y, control));
    return rcpp_result_gen;
END_RCPP
}
// owlDense
Rcpp::List owlDense(arma::mat x, arma::mat y, const Rcpp::List control);
RcppExport SEXP _owl_owlDense(SEXP xSEXP, SEXP ySEXP, SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(owlDense(x, y, control));
    return rcpp_result_gen;
END_RCPP
}
// prox_slope_cpp
arma::vec prox_slope_cpp(const arma::mat& y, const Rcpp::List& args);
RcppExport SEXP _owl_prox_slope_cpp(SEXP ySEXP, SEXP argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type args(argsSEXP);
    rcpp_result_gen = Rcpp::wrap(prox_slope_cpp(y, args));
    return rcpp_result_gen;
END_RCPP
}
// standardizedSparseColNorms
arma::vec standardizedSparseColNorms(const arma::sp_mat& x, const arma::vec& x_center);
RcppExport SEXP _owl_standardizedSparseColNorms(SEXP xSEXP, SEXP x_centerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type x_center(x_centerSEXP);
    rcpp_result_gen = Rcpp::wrap(standardizedSparseColNorms(x, x_center));
    return rcpp_result_gen;
END_RCPP
}
// colNormsSparse
arma::vec colNormsSparse(const arma::sp_mat& x, const arma::uword norm_type);
RcppExport SEXP _owl_colNormsSparse(SEXP xSEXP, SEXP norm_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type norm_type(norm_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(colNormsSparse(x, norm_type));
    return rcpp_result_gen;
END_RCPP
}
// colNormsDense
arma::vec colNormsDense(const arma::mat& x, const arma::uword norm_type);
RcppExport SEXP _owl_colNormsDense(SEXP xSEXP, SEXP norm_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type norm_type(norm_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(colNormsDense(x, norm_type));
    return rcpp_result_gen;
END_RCPP
}
// lambdaMax
arma::vec lambdaMax(SEXP x, const arma::mat& y, const arma::vec& x_center, const arma::vec& x_scale, const arma::vec& y_scale, const arma::uword n_targets, const std::string& family, const bool standardize_features);
RcppExport SEXP _owl_lambdaMax(SEXP xSEXP, SEXP ySEXP, SEXP x_centerSEXP, SEXP x_scaleSEXP, SEXP y_scaleSEXP, SEXP n_targetsSEXP, SEXP familySEXP, SEXP standardize_featuresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type x_center(x_centerSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type x_scale(x_scaleSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y_scale(y_scaleSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type n_targets(n_targetsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type family(familySEXP);
    Rcpp::traits::input_parameter< const bool >::type standardize_features(standardize_featuresSEXP);
    rcpp_result_gen = Rcpp::wrap(lambdaMax(x, y, x_center, x_scale, y_scale, n_targets, family, standardize_features));
    return rcpp_result_gen;
END_RCPP
}
// standardize
Rcpp::List standardize(SEXP x);
RcppExport SEXP _owl_standardize(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(standardize(x));
    return rcpp_result_gen;
END_RCPP
}
// tester
arma::mat tester(arma::uvec y, arma::mat lin_pred);
RcppExport SEXP _owl_tester(SEXP ySEXP, SEXP lin_predSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lin_pred(lin_predSEXP);
    rcpp_result_gen = Rcpp::wrap(tester(y, lin_pred));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_owl_owlSparse", (DL_FUNC) &_owl_owlSparse, 3},
    {"_owl_owlDense", (DL_FUNC) &_owl_owlDense, 3},
    {"_owl_prox_slope_cpp", (DL_FUNC) &_owl_prox_slope_cpp, 2},
    {"_owl_standardizedSparseColNorms", (DL_FUNC) &_owl_standardizedSparseColNorms, 2},
    {"_owl_colNormsSparse", (DL_FUNC) &_owl_colNormsSparse, 2},
    {"_owl_colNormsDense", (DL_FUNC) &_owl_colNormsDense, 2},
    {"_owl_lambdaMax", (DL_FUNC) &_owl_lambdaMax, 8},
    {"_owl_standardize", (DL_FUNC) &_owl_standardize, 1},
    {"_owl_tester", (DL_FUNC) &_owl_tester, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_owl(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
