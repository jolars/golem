// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// golemSparse
Rcpp::List golemSparse(const arma::sp_mat& x, const arma::mat& y, const Rcpp::List control);
RcppExport SEXP _prague_golemSparse(SEXP xSEXP, SEXP ySEXP, SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(golemSparse(x, y, control));
    return rcpp_result_gen;
END_RCPP
}
// golemDense
Rcpp::List golemDense(const arma::mat& x, const arma::mat& y, const Rcpp::List control);
RcppExport SEXP _prague_golemDense(SEXP xSEXP, SEXP ySEXP, SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(golemDense(x, y, control));
    return rcpp_result_gen;
END_RCPP
}
// prox_slope_cpp
arma::vec prox_slope_cpp(const arma::vec& y, const Rcpp::List& args);
RcppExport SEXP _prague_prox_slope_cpp(SEXP ySEXP, SEXP argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type args(argsSEXP);
    rcpp_result_gen = Rcpp::wrap(prox_slope_cpp(y, args));
    return rcpp_result_gen;
END_RCPP
}
// standardizedSparseColNorms
arma::vec standardizedSparseColNorms(const arma::sp_mat& x, const arma::vec& x_center);
RcppExport SEXP _prague_standardizedSparseColNorms(SEXP xSEXP, SEXP x_centerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type x_center(x_centerSEXP);
    rcpp_result_gen = Rcpp::wrap(standardizedSparseColNorms(x, x_center));
    return rcpp_result_gen;
END_RCPP
}
// colNormsSparse
arma::vec colNormsSparse(const arma::sp_mat& x, const arma::uword norm_type);
RcppExport SEXP _prague_colNormsSparse(SEXP xSEXP, SEXP norm_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type norm_type(norm_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(colNormsSparse(x, norm_type));
    return rcpp_result_gen;
END_RCPP
}
// colNormsDense
arma::vec colNormsDense(const arma::mat& x, const arma::uword norm_type);
RcppExport SEXP _prague_colNormsDense(SEXP xSEXP, SEXP norm_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type norm_type(norm_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(colNormsDense(x, norm_type));
    return rcpp_result_gen;
END_RCPP
}
// rowNormsSparse
arma::vec rowNormsSparse(const arma::sp_mat& x, const arma::uword norm_type);
RcppExport SEXP _prague_rowNormsSparse(SEXP xSEXP, SEXP norm_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type norm_type(norm_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(rowNormsSparse(x, norm_type));
    return rcpp_result_gen;
END_RCPP
}
// rowNormsDense
arma::vec rowNormsDense(const arma::mat& x, const arma::uword norm_type);
RcppExport SEXP _prague_rowNormsDense(SEXP xSEXP, SEXP norm_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type norm_type(norm_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(rowNormsDense(x, norm_type));
    return rcpp_result_gen;
END_RCPP
}
// maxSquaredRowNorm
double maxSquaredRowNorm(SEXP x, const arma::rowvec& x_scaled_center, const bool standardize_features);
RcppExport SEXP _prague_maxSquaredRowNorm(SEXP xSEXP, SEXP x_scaled_centerSEXP, SEXP standardize_featuresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type x_scaled_center(x_scaled_centerSEXP);
    Rcpp::traits::input_parameter< const bool >::type standardize_features(standardize_featuresSEXP);
    rcpp_result_gen = Rcpp::wrap(maxSquaredRowNorm(x, x_scaled_center, standardize_features));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_prague_golemSparse", (DL_FUNC) &_prague_golemSparse, 3},
    {"_prague_golemDense", (DL_FUNC) &_prague_golemDense, 3},
    {"_prague_prox_slope_cpp", (DL_FUNC) &_prague_prox_slope_cpp, 2},
    {"_prague_standardizedSparseColNorms", (DL_FUNC) &_prague_standardizedSparseColNorms, 2},
    {"_prague_colNormsSparse", (DL_FUNC) &_prague_colNormsSparse, 2},
    {"_prague_colNormsDense", (DL_FUNC) &_prague_colNormsDense, 2},
    {"_prague_rowNormsSparse", (DL_FUNC) &_prague_rowNormsSparse, 2},
    {"_prague_rowNormsDense", (DL_FUNC) &_prague_rowNormsDense, 2},
    {"_prague_maxSquaredRowNorm", (DL_FUNC) &_prague_maxSquaredRowNorm, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_prague(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
